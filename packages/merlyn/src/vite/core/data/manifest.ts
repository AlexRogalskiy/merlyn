import type { Engine, Scene, Loadable } from 'excalibur'
import path from 'path'
import type { MerlynConfig } from '../types.js'
import { writeIfChanged, getRouteName } from '../utils/index.js'
import { walk } from '../utils/fs.js'
import { format } from 'prettier'

export interface Manifest {
  title: string
  game: Engine
  devtool?: { enabled?: boolean }
  scenes: {
    boot: string
    files: Record<string, SceneData>
    loading: {
      default: string
      boot: string
      resources: Loadable<any>[]
    }
  }
}

export type SceneData = {
  path: string
} & (
  | {
      isPreloaded: true
      scene: typeof Scene
    }
  | {
      isPreloaded: false | undefined
      scene: () => Promise<{ default: typeof Scene }>
    }
)

export function writeManifest(
  cwd: string,
  outDir: string,
  config: MerlynConfig
) {
  writeIfChanged(
    path.join(cwd, `${outDir}/manifest.js`),
    format(manifest(cwd, outDir, config), { parser: 'babel' })
  )
}

function manifest(cwd: string, outDir: string, config: MerlynConfig) {
  const sceneImports = new Set()
  const loadingSceneImports = new Set()

  const scenes: Record<string, { isPreloaded?: boolean; path?: string }> = walk(
    config.scenes.path
  ).reduce((acc, name) => {
    const key = getRouteName(name, config.scenes.path)
    const isPreloaded = isScenePreloaded(key, config)
    const scenePath = path.relative(outDir, path.join(config.scenes.path, name))

    if (isPreloaded) {
      const isLoadingScene = isSceneLoadingScene(key)
      const imports = isLoadingScene ? loadingSceneImports : sceneImports
      imports.add(`import _scene_${toValidName(key)} from '${scenePath}'`)
    }

    acc[key] = {
      isPreloaded,
      path: scenePath,
    }

    return acc
  }, {})

  // todo: correctly default loading scenes, but only if not defined in config
  // todo: make sure boot/default differentiations work
  const defaultLoadingScene =
    typeof config.scenes.loading === 'string'
      ? config.scenes.loading
      : config.scenes.loading.default

  const bootLoadingScene =
    typeof config.scenes.loading === 'string'
      ? config.scenes.loading
      : config.scenes.loading.boot

  // if loading scenes dont exist, use MerlynLoadingScene
  if (!scenes[defaultLoadingScene] || !scenes[bootLoadingScene]) {
    scenes[defaultLoadingScene] ??= {
      isPreloaded: true,
    }
    scenes[bootLoadingScene] ??= {
      isPreloaded: true,
    }
    ;[defaultLoadingScene, bootLoadingScene].forEach((key) => {
      loadingSceneImports.add(
        `import { MerlynLoadingScene as _scene_${toValidName(
          key
        )} } from 'merlyn'`
      )
    })
  }

  return /* js */ `
    /* this file is generated by merlyn */

    // import loading scenes first, get any resources used by them
    import { getResources } from '$game'    
    ${Array.from(loadingSceneImports).join('\n')}
    const loadingResources = getResources()
    // end of loading scenes
    
    // import preloaded scenes
    ${Array.from(sceneImports).join('\n')}
    // end of preloaded scenes

		import * as _game from ${JSON.stringify(
      path.relative(outDir, path.join(cwd, config.game))
    )};

    export const devtool = ${JSON.stringify(config.devtool)};
    export const game = _game.default;
    export const title = ${JSON.stringify(config.title)}

		export const scenes = {
      boot: ${JSON.stringify(config.scenes.boot)},
      loading: {
        resources: loadingResources,
        default: ${JSON.stringify(
          typeof config.scenes.loading === 'string'
            ? config.scenes.loading
            : config.scenes.loading.default
        )},
        boot: ${JSON.stringify(
          typeof config.scenes.loading === 'string'
            ? config.scenes.loading
            : config.scenes.loading.boot
        )},
      },      
      files: {
        ${Object.entries(scenes)
          .map(([key, value]) => {
            return `${JSON.stringify(key)}: {
              isPreloaded: ${value.isPreloaded ? 'true' : 'false'},
              scene: ${
                value.isPreloaded
                  ? `new _scene_${toValidName(key)}()`
                  : `() => import("${value.path}")`
              }
          }`
          })
          .join(',')}
      }
    }
  `
}

function isScenePreloaded(name: string, config: MerlynConfig) {
  if (isSceneLoadingScene(name)) {
    return true
  }
  if (typeof config.scenes.preload === 'boolean' || !config.scenes.preload) {
    return !!config.scenes.preload
  }

  return config.scenes.preload.includes(name)
}

function isSceneLoadingScene(name: string) {
  return name === 'loading' || name.startsWith('loading/')
}

function toValidName(name: string) {
  return name.replace(/[^a-zA-Z0-9]/g, '_')
}
